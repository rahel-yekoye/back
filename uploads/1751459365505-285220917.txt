callservice .dart

.........
import 'package:flutter_webrtc/flutter_webrtc.dart';
import 'package:socket_io_client/socket_io_client.dart' as IO;
import 'dart:async';

class CallService {
  final IO.Socket socket;
  final String selfId;
    Timer? _callTimer;


  final void Function(Map<String, dynamic>) onCallDeclined;
  final void Function(Map<String, dynamic>) onCallEnded;
  final void Function(MediaStream) onRemoteStream;
 final void Function(MediaStream stream)? onLocalStream; // <-- Add this
  final void Function()? onCallConnected; // <-- Add this

  final void Function(String fromId, bool voiceOnly, String callerName) onIncomingCall;
  final void Function() onCallTimeout;

  RTCPeerConnection? _peerConnection;
  MediaStream? _localStream;
  MediaStream? _remoteStream;

  bool _hasHandledOffer = false;
  bool _remoteDescriptionSet = false;
  bool _isInCall = false;

  final List<RTCIceCandidate> _pendingCandidates = [];
  Timer? _callTimeoutTimer;
  String? _currentCallPartnerId;
Function()? onCallEndedUI;
Map<String, dynamic>? _remoteOffer;

  CallService({
    required this.socket,
    required this.selfId,
    required this.onCallDeclined,
    required this.onCallEnded,
    required this.onRemoteStream,
    required this.onIncomingCall,
    required this.onCallTimeout,
        this.onCallConnected, // <-- Include in constructor
    this.onLocalStream, // <-- Include in constructor

  }) {
    print('[CallService] Initializing CallService for user $selfId');
    _initializeSocketListeners();
  }

  void _initializeSocketListeners() {
    socket.on('call_offer', (data) async {
      final fromId = data['from'] as String;
      print('[CallService] Received call_offer from $fromId');

      if (_isInCall) {
        print('[CallService] Already in a call, sending call_declined automatically.');
        // Auto decline if busy
        socket.emit('call_declined', {'from': selfId, 'to': fromId});
        return;
      }

      try {
        // Notify UI of incoming call before handling offer so UI can prompt user
        onIncomingCall(fromId, data['voiceOnly'] ?? false, data['callerName'] ?? '');

        // Store current call partner for signaling consistency
        _currentCallPartnerId = fromId;

        // We do NOT set _isInCall here because user may decline
        // Handling offer only after user accepts, so you may want to do this in UI logic

        // But if you want auto-answer here, uncomment below:
        /*
        await _handleIncomingOffer(
          offerData: data['offer'],
          fromId: fromId,
          voiceOnly: data['voiceOnly'] ?? false,
          callerName: data['callerName'] ?? '',
        );
        */
      } catch (e) {
        print('[CallService] Error handling call_offer: $e');
      }
    });
    

    socket.on('answer_made', (data) async {
      final fromId = data['from'] as String;
      print('[CallService] Received answer_made from $fromId');

      if (!_isInCall || fromId != _currentCallPartnerId) {
        print('[CallService] Not in call or wrong partner, ignoring answer.');
        return;
      }

      try {
        final answer = RTCSessionDescription(
          data['answer']['sdp'],
          data['answer']['type'],
        );
        print('[CallService] Setting remote description with answer...');
        await _peerConnection?.setRemoteDescription(answer);
        _remoteDescriptionSet = true;

        if (_pendingCandidates.isNotEmpty) {
          print('[CallService] Adding ${_pendingCandidates.length} pending ICE candidates...');
          for (final candidate in _pendingCandidates) {
            await _peerConnection?.addCandidate(candidate);
          }
          _pendingCandidates.clear();
        }

        // Cancel timeout timer since call was answered
        _cancelCallTimeout();
      } catch (e) {
        print('[CallService] Error setting remote description from answer: $e');
      }
    });

    socket.on('ice_candidate', (data) async {
      final fromId = data['from'] as String;
      if (!_isInCall || fromId != _currentCallPartnerId) {
        print('[CallService] Not in call or wrong partner, ignoring ICE candidate.');
        return;
      }

      try {
        final candidate = RTCIceCandidate(
          data['candidate']['candidate'],
          data['candidate']['sdpMid'],
          data['candidate']['sdpMLineIndex'],
        );
        print('[CallService] Received ICE candidate from $fromId');
        if (_remoteDescriptionSet) {
          print('[CallService] Adding ICE candidate immediately.');
          await _peerConnection?.addCandidate(candidate);
        } else {
          print('[CallService] Remote description not set yet, queueing ICE candidate.');
          _pendingCandidates.add(candidate);
        }
      } catch (e) {
        print('[CallService] Error adding ICE candidate: $e');
      }
    });

    socket.on('call_declined', (data) {
      final fromId = data['from'] as String;
      print('[CallService] Call declined by $fromId');

      if (_currentCallPartnerId != fromId) {
        print('[CallService] Decline from unrelated user, ignoring.');
        return;
      }

      onCallDeclined(data);
      _cleanup();
    });

    socket.on('call_ended', (data) {
  final fromId = data['from'] as String;
  print('[CallService] Call ended by $fromId');

  if (_currentCallPartnerId != fromId) {
    print('[CallService] End call from unrelated user, ignoring.');
    return;
  }

  onCallEnded(data); // your existing signaling clean-up
  _cleanup();

  // Notify UI layer
  if (onCallEndedUI != null) {
    onCallEndedUI!(); // This will pop CallScreen if set
  }
});

    socket.on('call_missed', (data) {
      final fromId = data['from'] as String;
      print('[CallService] Call missed from $fromId');

      if (_currentCallPartnerId != fromId) {
        print('[CallService] Missed call from unrelated user, ignoring.');
        return;
      }

      onCallDeclined(data);
      _cleanup();
    });
  }

  /// Initiates a call and starts a timeout timer waiting for answer.
  void initiateCall({
    required String to,
    required bool voiceOnly,
    required String callerName,
  }) {
    if (_isInCall) {
      print('[CallService] Cannot initiate call: already in call.');
      return;
    }
    print('[CallService] Initiating call to $to (voiceOnly: $voiceOnly, callerName: $callerName)');
    _isInCall = true;
    _currentCallPartnerId = to;

    socket.emit('call_initiate', {
      'from': selfId,
      'to': to,
      'voiceOnly': voiceOnly,
      'callerName': callerName,
    });

    // Start timeout to auto end call if no answer in 30 seconds
    _startCallTimeout();
  }

  Future<void> sendOffer({
    required String to,
    required RTCSessionDescription offer,
    required bool voiceOnly,
    required String callerName,
  }) async {
    print('[CallService] Sending offer to $to');
    socket.emit('call_offer', {
      'from': selfId,
      'to': to,
      'offer': {'sdp': offer.sdp, 'type': offer.type},
      'voiceOnly': voiceOnly,
      'callerName': callerName,
    });
  }

  Future<void> sendAnswer({
    required String to,
    required RTCSessionDescription answer,
  }) async {
    print('[CallService] Sending answer to $to');
    socket.emit('answer_made', {
      'from': selfId,
      'to': to,
      'answer': {'sdp': answer.sdp, 'type': answer.type},
    });
  }

  Future<void> sendIceCandidate({
    required String to,
    required RTCIceCandidate candidate,
  }) async {
    print('[CallService] Sending ICE candidate to $to');
    socket.emit('ice_candidate', {
      'from': selfId,
      'to': to,
      'candidate': {
        'candidate': candidate.candidate,
        'sdpMid': candidate.sdpMid,
        'sdpMLineIndex': candidate.sdpMLineIndex,
      },
    });
  }
void dispose() {
  // Stop and dispose local stream if any
  _localStream?.getTracks().forEach((track) => track.stop());
  _localStream = null;

  // Close peer connection
  _peerConnection?.close();
  _peerConnection = null;

  // Stop and dispose remote stream if any
  _remoteStream?.getTracks().forEach((track) => track.stop());
  _remoteStream = null;

  // Cancel any timers you have
  _callTimeoutTimer?.cancel();
  _callTimeoutTimer = null;
}

  void declineCall({required String to}) {
    print('[CallService] Declining call from $to');
    socket.emit('call_declined', {
      'from': selfId,
      'to': to,
    });
    _cleanup();
  }

  void endCall({required String to}) {
    print('[CallService] Ending call with $to');
    socket.emit('call_ended', {
      'from': selfId,
      'to': to,
    });
    _cleanup();
  }
Future<void> acceptCall({
  required Map<String, dynamic> offerData,
  required String fromId,
  required bool voiceOnly,
}) async {
  if (_isInCall) {
    print('[CallService] Already in a call. Cannot accept another.');
    return;
  }

  _isInCall = true;
  _currentCallPartnerId = fromId;

  await setupPeerConnection(
    isCaller: false,
    remoteId: fromId,
    voiceOnly: voiceOnly,
    callerName: '', // Not needed here
  );

  final offer = RTCSessionDescription(
    offerData['sdp'],
    offerData['type'],
  );
  await _peerConnection!.setRemoteDescription(offer);
  _remoteDescriptionSet = true;

  final answer = await _peerConnection!.createAnswer();
  await _peerConnection!.setLocalDescription(answer);

  await sendAnswer(to: fromId, answer: answer);
}

  Future<void> setupPeerConnection({
    required bool isCaller,
    required String remoteId,
    required bool voiceOnly,
    required String callerName,
  }) async {
    print('[CallService] Setting up peer connection (isCaller: $isCaller) for call with $remoteId');
    final configuration = {
      'iceServers': [
        {'urls': 'stun:stun.l.google.com:19302'},
      ]
    };

    try {
      _peerConnection = await createPeerConnection(configuration);
      print('[CallService] PeerConnection created');

      _localStream = await navigator.mediaDevices.getUserMedia({
        'audio': true,
        'video': !voiceOnly,
      });
      print('[CallService] Obtained local media stream (audio: true, video: ${!voiceOnly})');

      // Add tracks to peer connection
      _localStream?.getTracks().forEach((track) {
        _peerConnection?.addTrack(track, _localStream!);
        print('[CallService] Added local track of kind ${track.kind} to peer connection');
      });

      _peerConnection?.onIceCandidate = (candidate) {
        if (candidate != null) {
          print('[CallService] onIceCandidate triggered');
          sendIceCandidate(to: remoteId, candidate: candidate);
        }
      };

      _peerConnection?.onTrack = (event) {
        if (event.streams.isNotEmpty) {
          _remoteStream = event.streams[0];
          print('[CallService] onTrack triggered - remote stream received');
          onRemoteStream(_remoteStream!);
        }
      };

            if (onLocalStream != null && _localStream != null) {
        onLocalStream!(_localStream!);
      }

      if (isCaller) {
        print('[CallService] Creating offer as caller...');
        final offer = await _peerConnection!.createOffer();
        await _peerConnection!.setLocalDescription(offer);

        await sendOffer(
          to: remoteId,
          offer: offer,
          voiceOnly: voiceOnly,
          callerName: callerName,
        );
      } else {
        print('[CallService] Waiting for offer to respond to...');
      }

      // Call is considered connected after negotiation
      if (onCallConnected != null) {
        onCallConnected!();
      }

    } catch (e) {
      print('[CallService] Error setting up peer connection: $e');
    }
  }


  Future<void> handleIncomingCallAccepted() async {
    // Called by UI after user accepts incoming call, to actually handle the offer.
    if (_currentCallPartnerId == null) return;
    if (_isInCall) return;

    _isInCall = true;

    print('[CallService] Handling incoming call accepted for $_currentCallPartnerId');
    // You must have stored the offer data somewhere in onIncomingCall callback to use here
    // Or you could modify the code to keep the offer in a private var.
  }

  Future<void> _handleIncomingOffer({
    required Map<String, dynamic> offerData,
    required String fromId,
    required bool voiceOnly,
    required String callerName,
  }) async {
    print('[CallService] Handling incoming call offer from $fromId');
    await setupPeerConnection(
      isCaller: false,
      remoteId: fromId,
      voiceOnly: voiceOnly,
      callerName: callerName,
    );
    final offer = RTCSessionDescription(
      offerData['sdp'],
      offerData['type'],
    );
    await _peerConnection?.setRemoteDescription(offer);

    final answer = await _peerConnection!.createAnswer();
    await _peerConnection!.setLocalDescription(answer);
    await sendAnswer(to: fromId, answer: answer);

    _remoteDescriptionSet = true;

    if (_pendingCandidates.isNotEmpty) {
      for (var c in _pendingCandidates) {
        await _peerConnection?.addCandidate(c);
      }
      _pendingCandidates.clear();
    }
  }

void _startCallTimeout() {
  _callTimeoutTimer = Timer(Duration(seconds: 30), () {
    print('[CallService] Call timeout. No answer received.');
    onCallTimeout(); // UI should show "Missed call"
    socket.emit('call_missed', {
      'from': selfId,
      'to': _currentCallPartnerId,
    });
    _cleanup();
  });
}

  void _cancelCallTimeout() {
    if (_callTimeoutTimer != null && _callTimeoutTimer!.isActive) {
      _callTimeoutTimer?.cancel();
      print('[CallService] Call timeout canceled');
    }
  }
  int _callSeconds = 0;
  void toggleMute(bool muted) {
  if (_localStream != null) {
    for (var track in _localStream!.getAudioTracks()) {
      track.enabled = !muted;
    }
  }
}


void _startCallDurationTimer(void Function(int seconds) onTick) {
  _callSeconds = 0;
  _callTimer?.cancel();
  _callTimer = Timer.periodic(Duration(seconds: 1), (timer) {
    _callSeconds++;
    onTick(_callSeconds);
  });
}

void stopCallDurationTimer() {
  _callTimer?.cancel();
  _callTimer = null;
  _callSeconds = 0;
}

void switchCamera() {
 final MediaStreamTrack? videoTrack = _localStream!.getVideoTracks().firstWhere(
  (track) => track.kind == 'video',
  orElse: () => null as MediaStreamTrack, // cast is a hack
);

  if (videoTrack != null) {
    Helper.switchCamera(videoTrack);
  }
}

void toggleSpeaker(bool enabled) {
  // flutter_webrtc package provides setSpeakerphoneOn for Android/iOS
  // For Web this does not apply
  Helper.setSpeakerphoneOn(enabled);
}

void _cleanup() {
  print('[CallService] Cleaning up call state...');
  _isInCall = false;
  _remoteDescriptionSet = false;
  _hasHandledOffer = false;
  _currentCallPartnerId = null;

  _callTimeoutTimer?.cancel();
  _callTimeoutTimer = null;

  _peerConnection?.close();
  _peerConnection = null;

  _localStream?.getTracks().forEach((t) => t.stop());
  _localStream = null;

  _remoteStream?.getTracks().forEach((t) => t.stop());
  _remoteStream = null;

  _pendingCandidates.clear();
}
Future<void> _createPeerConnection() async {
  final configuration = {
    'iceServers': [
      {'urls': 'stun:stun.l.google.com:19302'},
    ],
  };

  _peerConnection = await createPeerConnection(configuration);

  // Add event listeners
  _peerConnection?.onIceCandidate = (RTCIceCandidate candidate) {
    if (candidate.candidate != null) {
      print('[CallService] Sending ICE candidate to $_currentCallPartnerId');
      socket.emit('ice_candidate', {
        'to': _currentCallPartnerId,
        'candidate': {
          'candidate': candidate.candidate,
          'sdpMid': candidate.sdpMid,
          'sdpMLineIndex': candidate.sdpMLineIndex,
        },
      });
    }
  };

  _peerConnection?.onAddStream = (MediaStream stream) {
    print('[CallService] Received remote stream');
    onRemoteStream(stream); // You should define this callback to update UI
  };

  // Add local media stream to peer connection
  if (_localStream != null) {
    _peerConnection?.addStream(_localStream!);
  }
}

Future<void> answerCall() async {
  if (_currentCallPartnerId == null) {
    print('[CallService] No call partner ID to answer call.');
    return;
  }

  try {
    print('[CallService] Creating peer connection for answering call...');
    await _createPeerConnection();

    // Set remote description from the offer we received earlier
    final offer = RTCSessionDescription(
      _remoteOffer!['sdp'],
      _remoteOffer!['type'],
    );
    await _peerConnection?.setRemoteDescription(offer);

    print('[CallService] Creating answer...');
    final answer = await _peerConnection!.createAnswer();
    await _peerConnection!.setLocalDescription(answer);

    print('[CallService] Sending answer to ${_currentCallPartnerId}...');
    socket.emit('make_answer', {
      'to': _currentCallPartnerId,
      'from': selfId,
      'answer': {
        'sdp': answer.sdp,
        'type': answer.type,
      },
    });

    _isInCall = true;
  } catch (e) {
    print('[CallService] Error answering call: $e');
  }
}

  bool get isInCall => _isInCall;

  MediaStream? get localStream => _localStream;

  MediaStream? get remoteStream => _remoteStream;
}

calscreen.dart 

..

😕😕😕😕😕😕😕😕😕😕


import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_webrtc/flutter_webrtc.dart';
import '../services/socket_service.dart';
import '../services/call_service.dart';

enum CallStatus {
  idle,
  ringing,
  incoming,
  outgoing,
  connected,
  ended,
  declined,
  timeout,
}

class CallScreen extends StatefulWidget {
  final SocketService socketService;
  final String selfId;
  final String peerId;
  final bool isCaller;
  final bool voiceOnly;
  final String callerName;

  const CallScreen({
    Key? key,
    required this.socketService,
    required this.selfId,
    required this.peerId,
    required this.isCaller,
    required this.voiceOnly,
    required this.callerName,
  }) : super(key: key);

  @override
  State<CallScreen> createState() => _CallScreenState();
}

class _CallScreenState extends State<CallScreen> {
  final RTCVideoRenderer _remoteRenderer = RTCVideoRenderer();
  final RTCVideoRenderer _localRenderer = RTCVideoRenderer();

  CallStatus _callStatus = CallStatus.idle;
  bool _isMuted = false;
  bool _speakerOn = false;
  Timer? _callTimer;
  int _callDurationSeconds = 0;
  late CallService _callService;
Timer? _callTimeoutTimer;
bool _hasAnswered = false;




  @override
  void initState() {
    super.initState();
    _initializeRenderers();

    _callService = CallService(
      socket: widget.socketService.socket,
      selfId: widget.selfId,
      onCallDeclined: _onCallDeclined,
      onCallEnded: _onCallEnded,
      onRemoteStream: _onRemoteStreamReceived,
      onLocalStream: _onLocalStreamReceived,
      onCallTimeout: _onCallTimeout,
      onCallConnected: _onCallConnected,
      onIncomingCall: _onIncomingCall,
    );
  _callService.onCallEndedUI = () {
    if (mounted) {
      Navigator.of(context).pop(); // Auto close CallScreen
    }
  };
    _startTimeoutTimer(); // your timeout logic

     widget.socketService.socket.on('call_ended', (_) {
      if (mounted) Navigator.of(context).pop();
    });
  if (widget.isCaller) {
    _callStatus = CallStatus.outgoing;
    _callService.initiateCall(
      to: widget.peerId,
      voiceOnly: widget.voiceOnly,
      callerName: widget.callerName,
    );
  } else {
    _callStatus = CallStatus.incoming;
  }

   
    if (widget.isCaller) {
      _callStatus = CallStatus.outgoing;
      _callService.initiateCall(
        to: widget.peerId,
        voiceOnly: widget.voiceOnly,
        callerName: widget.callerName,
      );
      _startCallTimeoutCountdown();
    } else {
      _callStatus = CallStatus.incoming;
    }
  }
void _startTimeoutTimer() {
  _callTimeoutTimer = Timer(const Duration(seconds: 45), () {
    if (!_hasAnswered) {
      _callService.endCall(to: widget.peerId);
      if (mounted) {
        Navigator.of(context).pop();
      }
    }
  });
}
void _acceptCall() async {
  _hasAnswered = true; // ✅ make sure _hasAnswered is declared in your widget state
  _callTimeoutTimer?.cancel(); // ✅ same for _callTimeoutTimer
  await _callService.answerCall(); // ✅ _callService must be defined
  setState(() {
    _callStatus = CallStatus.connected; // ✅ CallStatus should be an enum or declared
  });
}

  Future<void> _initializeRenderers() async {
    await _remoteRenderer.initialize();
    await _localRenderer.initialize();
  }

  @override
  void dispose() {
    _callTimer?.cancel();
    _remoteRenderer.dispose();
    _localRenderer.dispose();
    _callService.dispose();
    widget.socketService.socket.off('call_ended');
    super.dispose();
  }

  void _startCallTimeoutCountdown() {
    _callTimer?.cancel();
    _callTimer = Timer(const Duration(seconds: 30), () {
      if (_callStatus == CallStatus.outgoing) {
        _onCallTimeout();
      }
    });
  }

  void _startCallDurationTimer() {
    _callDurationSeconds = 0;
    _callTimer?.cancel();
    _callTimer = Timer.periodic(const Duration(seconds: 1), (_) {
      if (mounted) {
        setState(() {
          _callDurationSeconds++;
        });
      }
    });
  }

  void _stopCallDurationTimer() {
    _callTimer?.cancel();
  }

  String _formatDuration(int seconds) {
    final minutes = seconds ~/ 60;
    final secs = seconds % 60;
    return '${minutes.toString().padLeft(2, '0')}:${secs.toString().padLeft(2, '0')}';
  }

  void _onCallDeclined(Map<String, dynamic> _) {
    if (!mounted) return;
    setState(() => _callStatus = CallStatus.declined);
    _showCallEndedDialog('Call Declined');
  }

  void _onCallEnded(Map<String, dynamic> _) {
    if (!mounted) return;
    setState(() => _callStatus = CallStatus.ended);
    _showCallEndedDialog('Call Ended');
  }

  void _onCallTimeout() {
    if (!mounted) return;
    setState(() => _callStatus = CallStatus.timeout);
    _callService.endCall(to: widget.peerId);
    _showCallEndedDialog('No Answer');
  }

  void _onCallConnected() {
    if (!mounted) return;
    setState(() => _callStatus = CallStatus.connected);
    _startCallDurationTimer();
  }

  void _onRemoteStreamReceived(MediaStream stream) {
    _remoteRenderer.srcObject = stream;
  }

  void _onLocalStreamReceived(MediaStream stream) {
    _localRenderer.srcObject = stream;
  }

  void _onIncomingCall(String callerId, bool voiceOnly, String callerName) {
    if (!mounted) return;
    if (_callStatus != CallStatus.incoming) {
      setState(() => _callStatus = CallStatus.incoming);
    }
  }

  Future<void> _answerCall() async {
    setState(() => _callStatus = CallStatus.connected);
    await _callService.setupPeerConnection(
      isCaller: false,
      remoteId: widget.peerId,
      voiceOnly: widget.voiceOnly,
      callerName: widget.callerName,
    );
    _startCallDurationTimer();
  }

  void _rejectCall() {
    _callService.declineCall(to: widget.peerId);
    Navigator.pop(context);
  }

  void _endCall() {
    _callService.endCall(to: widget.peerId);
    Navigator.pop(context);
  }

  void _toggleMute() {
    setState(() {
      _isMuted = !_isMuted;
      _callService.toggleMute(_isMuted);
    });
  }

  void _toggleSpeaker() {
    setState(() {
      _speakerOn = !_speakerOn;
      Helper.setSpeakerphoneOn(_speakerOn);
    });
  }

void _showCallEndedDialog(String message) {
  if (!mounted) return;

  showDialog(
    context: context,
    barrierDismissible: false,
    builder: (_) => AlertDialog(
      title: Text(message),
      actions: [
        TextButton(
          onPressed: () {
            Navigator.of(context).pop(); // Close dialog
            if (Navigator.of(context).canPop()) {
              Navigator.of(context).pop(); // Close CallScreen
            }
          },
          child: const Text('OK'),
        )
      ],
    ),
  );
}


  // -------- UI BUILDERS --------
  Widget _buildIncomingCallUI() {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Text('Incoming call from ${widget.callerName}',
            style: const TextStyle(
                color: Colors.white, fontSize: 22, fontWeight: FontWeight.bold)),
        const SizedBox(height: 30),
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: _answerCall,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                shape: const CircleBorder(),
                padding: const EdgeInsets.all(20),
              ),
              child: const Icon(Icons.call, size: 32),
            ),
            const SizedBox(width: 50),
            ElevatedButton(
              onPressed: _rejectCall,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red,
                shape: const CircleBorder(),
                padding: const EdgeInsets.all(20),
              ),
              child: const Icon(Icons.call_end, size: 32),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildCallingUI() {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        const Text('Calling...',
            style: TextStyle(color: Colors.white, fontSize: 24)),
        const SizedBox(height: 20),
        const CircularProgressIndicator(color: Colors.white),
        const SizedBox(height: 40),
        ElevatedButton(
          onPressed: _endCall,
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.red,
            shape: const CircleBorder(),
            padding: const EdgeInsets.all(20),
          ),
          child: const Icon(Icons.call_end, size: 32),
        ),
      ],
    );
  }

  Widget _buildInCallUI() {
    return Stack(
      children: [
        Positioned.fill(
          child: widget.voiceOnly
              ? const Center(
                  child: Icon(Icons.call, color: Colors.white, size: 100),
                )
              : RTCVideoView(_remoteRenderer,
                  objectFit: RTCVideoViewObjectFit.RTCVideoViewObjectFitCover),
        ),
        if (!widget.voiceOnly)
          Positioned(
            right: 20,
            bottom: 200,
            width: 120,
            height: 160,
            child: RTCVideoView(_localRenderer,
                mirror: true,
                objectFit: RTCVideoViewObjectFit.RTCVideoViewObjectFitCover),
          ),
        Align(
          alignment: Alignment.topCenter,
          child: Padding(
            padding: const EdgeInsets.only(top: 60),
            child: Text(
              'In call with ${widget.callerName}',
              style: const TextStyle(color: Colors.white, fontSize: 20),
            ),
          ),
        ),
        Align(
          alignment: Alignment.topRight,
          child: Padding(
            padding: const EdgeInsets.only(top: 60, right: 20),
            child: Text(
              _formatDuration(_callDurationSeconds),
              style: const TextStyle(color: Colors.white, fontSize: 18),
            ),
          ),
        ),
        Align(
          alignment: Alignment.bottomCenter,
          child: Padding(
            padding: const EdgeInsets.all(25),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                IconButton(
                  onPressed: _toggleMute,
                  icon: Icon(
                    _isMuted ? Icons.mic_off : Icons.mic,
                    color: Colors.white,
                    size: 30,
                  ),
                ),
                IconButton(
                  onPressed: _endCall,
                  icon: const Icon(Icons.call_end, color: Colors.red, size: 36),
                ),
                IconButton(
                  onPressed: _toggleSpeaker,
                  icon: Icon(
                    _speakerOn ? Icons.volume_up : Icons.volume_off,
                    color: Colors.white,
                    size: 30,
                  ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    Widget body;
    switch (_callStatus) {
      case CallStatus.incoming:
        body = _buildIncomingCallUI();
        break;
      case CallStatus.outgoing:
        body = _buildCallingUI();
        break;
      case CallStatus.connected:
        body = _buildInCallUI();
        break;
      case CallStatus.ended:
      case CallStatus.declined:
      case CallStatus.timeout:
        body = const Center(
          child: Text('Call ended', style: TextStyle(color: Colors.white, fontSize: 22)),
        );
        break;
      case CallStatus.idle:
      default:
        body = const SizedBox.shrink();
        break;
    }

    return Scaffold(
      backgroundColor: Colors.black87,
      body: SafeArea(
        child: Container(
          width: double.infinity,
          height: double.infinity,
          color: Colors.black87,
          child: body,
        ),
      ),
    );
  }
}

....

😕😕😕😕😕😕

soket service import 'package:flutter/material.dart';
import 'package:socket_io_client/socket_io_client.dart' as IO;
import 'dart:async';
import '../models/message.dart' as models;
import '../screens/call_screen.dart';
import 'package:chat_app_flutter/services/call_service.dart';

class SocketService {
  static final SocketService _instance = SocketService._internal();
  factory SocketService() => _instance;
  SocketService._internal();

  IO.Socket? _socket;
  String? _selfId;

  IO.Socket get socket {
    if (_socket == null) {
      throw Exception('Socket not initialized. Call connect() first.');
    }
    return _socket!;
  }

  bool _isPrivateListenerSet = false;
  bool _isGroupListenerSet = false;
  bool _isCallListenerSet = false;
  bool _isCallSignalListenerSet = false;
  bool _isEndCallListenerSet = false;

  Future<void> connect({required String userId}) async {
    print('SocketService instance hash (connect): ${identityHashCode(this)}');
    if (_socket != null && _socket!.connected && _selfId == userId) {
      print('🔁 Socket already connected for user: $userId');
      return;
    }

    _selfId = userId;

    try {
      _socket?.dispose();
    } catch (_) {}

    resetListeners();

    final completer = Completer<void>();

    _socket = IO.io('http://192.168.20.143:4000', <String, dynamic>{
      'transports': ['websocket'],
      'autoConnect': false,
    });

    _socket!.onConnect((_) {
      print('✅ Connected to the socket server');
      if (_selfId != null) {
        print('[SOCKET] Emitting register_user: $_selfId');
        _socket!.emit('register_user', _selfId);
        print('🧑‍💻 Registered user for signaling: $_selfId');
      }
      completer.complete();
    });

    _socket!.onDisconnect((_) {
      print('🔌 Disconnected from the socket server');
    });

    _socket!.onConnectError((data) => print('❌ Connect Error: $data'));
    _socket!.onError((data) => print('❌ General Error: $data'));

    _socket!.connect();

    return completer.future;
  }

  void disconnect() {
    if (_socket != null && _socket!.connected) {
      _socket!.disconnect();
    }
  }

  // -------------------
  // Private chat
  // -------------------

  void registerUser(String username) {
    print('🧑‍💻 Registering user: $username');
    _socket?.emit('join_room', username);
  }

  void joinRoom(String roomId) {
    if (_socket == null) {
      print('❌ Socket not initialized.');
      return;
    }

    _socket!.off('connect');

    if (_socket!.connected) {
      _socket!.emit('join_room', roomId);
      print('✅ Immediately joined room: $roomId');
    } else {
      _socket!.on('connect', (_) {
        print('🔁 Socket connected later. Now joining room: $roomId');
        _socket!.emit('join_room', roomId);
      });

      if (!_socket!.connected && !_socket!.active) {
        print('⚙️ Connecting socket...');
        _socket!.connect();
      }
    }
  }

  void sendMessage(Map<String, dynamic> messageData) {
    if (_socket != null && _socket!.connected) {
      print('📤 Sending private message: $messageData');
      _socket!.emit('send_message', messageData);
    } else {
      print('❌ Socket not connected');
    }
  }

  void onMessageReceived(Function(models.Message) callback) {
    if (_socket != null) {
      _socket!.off('receive_message');
      _socket!.on('receive_message', (data) {
        print('📨 Private message received: $data');
        final msg = _processRawMessage(data);
        callback(msg);
      });
    }
  }

  // -------------------
  // Group chat
  // -------------------

  void joinGroups(List<String> groupIds) {
    if (_socket != null) {
      print('👥 Joining groups: $groupIds');
      _socket!.emit('join_groups', groupIds);
    }
  }

  void sendGroupMessage(Map<String, dynamic> messageData) {
    if (_socket != null && _socket!.connected) {
      print('📤 Sending group message: $messageData');
      _socket!.emit('send_group_message', messageData);
    } else {
      print('❌ Socket not connected');
    }
  }

  void onGroupMessageReceived(Function(models.Message) callback) {
    if (!_isGroupListenerSet && _socket != null) {
      _socket!.on('group_message', (data) {
        print('📨 Group message received: $data');
        final msg = _processRawMessage(data);
        callback(msg);
      });
      _isGroupListenerSet = true;
    }
  }

  // -------------------
  // Call signaling
  // -------------------

  void onCallMade(Function(Map<String, dynamic>) handler) {
    if (!_isCallListenerSet && _socket != null) {
      _socket!.on('call_made', (data) {
        if (data is Map) {
          print('📞 Call made signaling data: $data');
          handler(Map<String, dynamic>.from(data));
        }
      });
      _isCallListenerSet = true;
    }
  }

  void sendCallSignal(Map<String, dynamic> signalData) {
    if (_socket != null && _socket!.connected) {
      print('📤 Sending call signaling data: $signalData');
      _socket!.emit('call_signal', signalData);
    } else {
      print('❌ Socket not connected');
    }
  }

  void onCallSignalReceived(Function(Map<String, dynamic>) handler) {
    if (!_isCallSignalListenerSet && _socket != null) {
      _socket!.on('call_signal', (data) {
        if (data is Map) {
          print('📞 Call signaling data received: $data');
          handler(Map<String, dynamic>.from(data));
        }
      });
      _isCallSignalListenerSet = true;
    }
  }

  void sendEndCall(Map<String, dynamic> callEndData) {
    if (_socket != null && _socket!.connected) {
      print('📤 Sending end call signal: $callEndData');
      _socket!.emit('end_call', callEndData);
    }
  }

  void onEndCallReceived(Function(Map<String, dynamic>) handler) {
    if (!_isEndCallListenerSet && _socket != null) {
      _socket!.on('end_call', (data) {
        if (data is Map) {
          print('📞 End call signal received: $data');
          handler(Map<String, dynamic>.from(data));
        }
      });
      _isEndCallListenerSet = true;
    }
  }

  // Incoming call listener with callback style
  void onIncomingCall(void Function(Map<String, dynamic>) callback) {
    if (_socket != null) {
      _socket!.off('incoming_call');
      _socket!.on('incoming_call', (data) {
        print('[SOCKET] incoming_call event data: $data');
        if (data is Map) {
          callback(Map<String, dynamic>.from(data));
        }
      });
    }
  }

  /// Initialize socket listeners for incoming calls and other call events.
  /// This method should be called after connection to setup navigation to CallScreen on incoming call.
  void initializeSocketListeners({
    required BuildContext context,
    required String selfId,
  }) {
    if (_socket == null) {
      print('❌ Socket not initialized.');
      return;
    }

    _socket!.off('incoming_call');

    _socket!.on('incoming_call', (data) {
      print('[SOCKET] incoming_call event received: $data');

      if (data is! Map) {
        print('❌ Invalid data for incoming_call event');
        return;
      }

      final Map<String, dynamic> callData = Map<String, dynamic>.from(data);

      final callerId = callData['from'];
      final callerName = callData['callerName'];
      final voiceOnly = callData['voiceOnly'] ?? false;

      if (callerId == null) {
        print('❌ incoming_call missing callerId');
        return;
      }

      // Navigate to CallScreen passing all needed parameters
      Navigator.of(context).push(
        MaterialPageRoute(
          builder: (_) => CallScreen(
            selfId: selfId,
            peerId: callerId,
            isCaller: false,
            voiceOnly: voiceOnly,
            callerName: callerName,
            socketService: this,
          ),
        ),
      );
    });
  }

  void declineCall(String to) {
    if (_socket != null && _socket!.connected) {
      _socket!.emit('decline_call', {
        'from': _selfId,
        'to': to,
      });
      print('📞 Declined call from $to');
    }
  }

  // -------------------
  // Helpers
  // -------------------

  models.Message _processRawMessage(dynamic data) {
    return models.Message.fromJson(Map<String, dynamic>.from(data));
  }

  void resetListeners() {
    _isPrivateListenerSet = false;
    _isGroupListenerSet = false;
    _isCallListenerSet = false;
    _isCallSignalListenerSet = false;
    _isEndCallListenerSet = false;

    _socket?.off('receive_message');
    _socket?.off('group_message');
    _socket?.off('call_made');
    _socket?.off('call_signal');
    _socket?.off('end_call');
    _socket?.off('incoming_call');
  }

  void dispose() {
    resetListeners();
    _socket?.dispose();
  }

  void offMessageReceived() {
    _socket?.off('receive_message');
  }

  void offIncomingCall() {
    _socket?.off('incoming_call');
  }
}

😕😕😕😕😕😕

import 'dart:convert';

import 'package:emoji_picker_flutter/emoji_picker_flutter.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

import '../models/message.dart' as models;
import '../services/socket_service.dart';
import '../screens/call_screen.dart';

class ChatScreen extends StatefulWidget {
  final String currentUser; // must be username
  final String otherUser;   // must be username
  final String jwtToken;

  const ChatScreen({
    super.key,
    required this.currentUser,
    required this.otherUser,
    required this.jwtToken,
  });

  @override
  State<ChatScreen> createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen> {
  final _controller = TextEditingController();
  final _scrollController = ScrollController();
  final FocusNode _focusNode = FocusNode();
  final SocketService socketService = SocketService();
  List<models.Message> messages = [];
  bool _showEmojiPicker = false;

  @override
  void initState() {
    super.initState();
    print('🔵 ChatScreen initState for user: ${widget.currentUser}');
    final roomId = widget.currentUser.compareTo(widget.otherUser) < 0
        ? '${widget.currentUser}_${widget.otherUser}'
        : '${widget.otherUser}_${widget.currentUser}';
    socketService.connect(userId: widget.currentUser).then((_) {
      print('Socket connected: ${socketService.socket.connected}');
      print('Joining room: $roomId');
      _connectToSocket();
    });
    fetchMessages();
    _focusNode.addListener(() {
      if (_focusNode.hasFocus) {
        setState(() {
          _showEmojiPicker = false;
        });
      }
    });
  }
  

  void _connectToSocket() {
    print('Registering listeners for user: ${widget.currentUser}');
    final roomId = widget.currentUser.compareTo(widget.otherUser) < 0
        ? '${widget.currentUser}_${widget.otherUser}'
        : '${widget.otherUser}_${widget.currentUser}';

    socketService.joinRoom(roomId);

    // Remove previous listeners to avoid duplicates
    socketService.offMessageReceived();
    socketService.offIncomingCall();

    socketService.onMessageReceived((msg) {
      print('[SOCKET] receive_message event: ${msg.content}');
      if (mounted) {
        setState(() {
          // Only add if not already present (avoid duplicates)
          if (!messages.any((m) =>
              m.sender == msg.sender &&
              m.receiver == msg.receiver &&
              m.content == msg.content &&
              m.timestamp == msg.timestamp)) {
            messages.add(msg);
            print('Messages in UI after add: ${messages.length}');
          }
        });
        _scrollToBottomSmooth();
      }
    });

    // Handle incoming call: open CallScreen as callee
    print('Registering onIncomingCall listener for user: ${widget.currentUser}');
    socketService.onIncomingCall((data) {
      print('[SOCKET] incoming_call event: $data');
      print('[CALL] Current user: ${widget.currentUser}');
      if (mounted) {
        Navigator.of(context).push(
          MaterialPageRoute(
            builder: (_) => CallScreen(
              selfId: widget.currentUser,
              peerId: data['from'],
              isCaller: false,
              voiceOnly: data['voiceOnly'] ?? false,
              callerName: data['callerName'] ?? data['from'],
              socketService: socketService,
            ),
          ),
        );
      }
    });

    socketService.socket.onAny((event, data) {
      print('[SOCKET EVENT] $event: $data');
    });
  }

  Future<void> fetchMessages() async {
    final url = Uri.parse(
        'http://192.168.20.143:4000/messages?user1=${widget.currentUser}&user2=${widget.otherUser}');
    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        setState(() {
          messages = data.map((json) {
            return models.Message(
              sender: json['sender'] ?? 'Unknown',
              receiver: json['receiver'] ?? 'Unknown',
              content: json['content'] ?? '[No Content]',
              timestamp: json['timestamp'] ?? DateTime.now().toIso8601String(),
              isGroup: json['isGroup'] ?? false,
              emojis: (json['emojis'] as List<dynamic>?)?.cast<String>() ?? [],
              fileUrl: json['fileUrl'] ?? '',
            );
          }).toList();
        });
        WidgetsBinding.instance.addPostFrameCallback((_) {
          _scrollToBottomSmooth();
        });
      } else {
        debugPrint('Failed to fetch messages: ${response.statusCode}');
      }
    } catch (error) {
      debugPrint('Error fetching messages: $error');
    }
  }

  void _sendMessage(String content) {
    if (content.trim().isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Message cannot be empty')),
      );
      return;
    }

    final roomId = widget.currentUser.compareTo(widget.otherUser) < 0
        ? '${widget.currentUser}_${widget.otherUser}'
        : '${widget.otherUser}_${widget.currentUser}';

    final message = {
      'roomId': roomId,
      'sender': widget.currentUser,      // <-- must be username
      'receiver': widget.otherUser,      // <-- must be username
      'content': content,
      'timestamp': DateTime.now().toIso8601String(),
      'isGroup': false,
      'emojis': <String>[],
      'fileUrl': '',
    };

    socketService.sendMessage(message);
    _controller.clear();
    _scrollToBottomSmooth();
  }

  void _scrollToBottomSmooth() {
    if (_scrollController.hasClients) {
      _scrollController.animateTo(
        _scrollController.position.maxScrollExtent,
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeOut,
      );
    }
  }

  bool _isImageUrl(String url) {
    final lower = url.toLowerCase();
    return lower.endsWith('.png') ||
        lower.endsWith('.jpg') ||
        lower.endsWith('.jpeg') ||
        lower.endsWith('.gif') ||
        lower.endsWith('.bmp') ||
        lower.endsWith('.webp');
  }

  Widget _buildMessageContent(models.Message msg) {
    if (msg.fileUrl.isNotEmpty) {
      if (_isImageUrl(msg.fileUrl)) {
        return ClipRRect(
          borderRadius: BorderRadius.circular(8),
          child: Image.network(
            msg.fileUrl,
            loadingBuilder: (context, child, progress) {
              if (progress == null) return child;
              return SizedBox(
                width: 150,
                height: 150,
                child: Center(
                  child: CircularProgressIndicator(
                    value: progress.expectedTotalBytes != null
                        ? progress.cumulativeBytesLoaded /
                            progress.expectedTotalBytes!
                        : null,
                  ),
                ),
              );
            },
            errorBuilder: (context, error, stackTrace) =>
                const Text('[Image not available]'),
            width: 150,
            height: 150,
            fit: BoxFit.cover,
          ),
        );
      } else {
        return InkWell(
          onTap: () {
            // TODO: Add file download/open feature
          },
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(Icons.insert_drive_file, size: 20),
              const SizedBox(width: 8),
              Flexible(
                child: Text(
                  msg.fileUrl,
                  overflow: TextOverflow.ellipsis,
                  style: const TextStyle(
                    color: Colors.blue,
                    decoration: TextDecoration.underline,
                  ),
                ),
              ),
            ],
          ),
        );
      }
    } else {
      return RichText(
        text: TextSpan(
          text: msg.content,
          style: const TextStyle(color: Colors.black87, fontSize: 16),
        ),
      );
    }
  }

  // Call button handlers
  void _onVoiceCallPressed() {
    print('[CALL] Emitting call_initiate: from=${widget.currentUser}, to=${widget.otherUser}');
    socketService.socket.emit('call_initiate', {
      'from': widget.currentUser,
      'to': widget.otherUser,
      'voiceOnly': true,
      'callerName': widget.currentUser,
    });

    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => CallScreen(
          selfId: widget.currentUser,
          peerId: widget.otherUser,
          isCaller: true,
          voiceOnly: true,
          callerName: widget.currentUser,
          socketService: socketService,
        ),
      ),
    );
  }

  void _onVideoCallPressed() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => CallScreen(
          selfId: widget.currentUser,
          peerId: widget.otherUser,
          isCaller: true,
          voiceOnly: false,
          callerName: widget.currentUser,
          socketService: socketService,
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Row(
          children: [
            const CircleAvatar(child: Icon(Icons.person)),
            const SizedBox(width: 10),
            Text(
              widget.otherUser,
              style: const TextStyle(fontWeight: FontWeight.w600),
            ),
          ],
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.call, color: Colors.green),
            tooltip: 'Voice Call',
            onPressed: _onVoiceCallPressed,
          ),
          IconButton(
            icon: const Icon(Icons.videocam, color: Colors.blue),
            tooltip: 'Video Call',
            onPressed: _onVideoCallPressed,
          ),
        ],
      ),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              controller: _scrollController,
              itemCount: messages.length,
              padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
              itemBuilder: (context, index) {
                final msg = messages[index];
                print('Building message: ${msg.sender} -> ${msg.receiver}: ${msg.content}');
                final isMe = msg.sender == widget.currentUser;

                return Align(
                  alignment:
                      isMe ? Alignment.centerRight : Alignment.centerLeft,
                  child: Container(
                    margin: const EdgeInsets.symmetric(vertical: 4),
                    padding: const EdgeInsets.all(12),
                    constraints: BoxConstraints(
                      maxWidth: MediaQuery.of(context).size.width * 0.7,
                    ),
                    decoration: BoxDecoration(
                      color: isMe ? Colors.blue[200] : Colors.grey[300],
                      borderRadius: BorderRadius.only(
                        topLeft: const Radius.circular(12),
                        topRight: const Radius.circular(12),
                        bottomLeft: isMe
                            ? const Radius.circular(12)
                            : const Radius.circular(0),
                        bottomRight: isMe
                            ? const Radius.circular(0)
                            : const Radius.circular(12),
                      ),
                    ),
                    child: _buildMessageContent(msg),
                  ),
                );
              },
            ),
          ),
          _chatInputField(),
        ],
      ),
    );
  }

  Widget _chatInputField() {
    return SafeArea(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Row(
            children: [
              IconButton(
                icon: Icon(
                  _showEmojiPicker ? Icons.keyboard : Icons.emoji_emotions,
                ),
                onPressed: () {
                  FocusScope.of(context).unfocus();
                  setState(() {
                    _showEmojiPicker = !_showEmojiPicker;
                  });
                },
              ),
              Expanded(
                child: TextField(
                  controller: _controller,
                  focusNode: _focusNode,
                  textInputAction: TextInputAction.send,
                  decoration: InputDecoration(
                    hintText: 'Type your message...',
                    filled: true,
                    fillColor: Colors.grey[100],
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(20),
                      borderSide: BorderSide.none,
                    ),
                    contentPadding: const EdgeInsets.symmetric(horizontal: 16),
                  ),
                  onSubmitted: (value) => _sendMessage(value.trim()),
                ),
              ),
              IconButton(
                icon: const Icon(Icons.send, color: Colors.blue),
                onPressed: () => _sendMessage(_controller.text.trim()),
              ),
            ],
          ),
          if (_showEmojiPicker)
            SizedBox(
              height: 250,
              child: EmojiPicker(
                onEmojiSelected: (category, emoji) {
                  _controller.text += emoji.emoji;
                  _controller.selection = TextSelection.fromPosition(
                      TextPosition(offset: _controller.text.length));
                },
              ),
            ),
        ],
      ),
    );
  }
}
